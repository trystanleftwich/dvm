#!//usr/bin/env bash
DVM_VERSION="0.9.1.dev"
set -e
[ -n "$DEBUG" ] && set -x

usage() {
  printf "
Usage: $(basename "$0") [-v|-h] command [<args>]

Options

  --version, -v - Print the version and exit
  --help, -h    - Display CLI help (this output)

Commands

  check           Ensure that required software is installed and present
  destroy         Stops and deletes all traces of the vagrant machine
  env             Outputs environment variables for Docker to connect remotely
  halt, stop      Stops the vagrant machine
  ip              Outputs the IP address of the vagrant machine
  reload          Restarts vagrant machine, loads new configuration
  resume          Resume the suspended vagrant machine
  ssh             Connects to the machine via SSH
  status          Outputs status of the vagrant machine
  suspend, pause  Suspends the machine
  up, start       Starts and provisions the vagrant environment
  vagrant         Issue subcommands directly to the vagrant CLI

"
}

banner() {
  echo "-----> $*"
}

fail() {
  echo ">>>>>> $*" >&2
  exit 1
}

resolve_link() {
  "$(type -p greadlink readlink | head -1)" "$1"
}

abs_dirname() {
  local cwd=$(pwd)
  local path=$1

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name=${path##*/}
    path=$(resolve_link "$name" || true)
  done

  pwd
  cd "$cwd"
}

project_path() {
  local parent_path=$(dirname "$(abs_dirname "$0")")
  local home_dvm_path=$HOME/.dvm

  if [ -f "$VAGRANTFILE" ] ; then
    echo "$(abs_dirname "$VAGRANTFILE")"
  elif [ -f "$parent_path/Vagrantfile" ] ; then
    echo "$parent_path"
  elif [ -f "$home_dvm_path/Vagrantfile" ] ; then
    echo "$home_dvm_path"
  else
    fail "No Vagrantfile found in $parent_path or $home_dvm_path"
  fi
}

load_conf() {
  if [ -f "$project_path/dvm.conf" ] ; then
    source "$project_path/dvm.conf"
  fi
}

exec_vagrant() {
  load_conf

  if [ -f "$VAGRANTFILE" ] ; then
    export VAGRANT_VAGRANTFILE=$(basename "$VAGRANTFILE")
  fi

  cd $project_path
  exec vagrant "$@"
}

check() {
  local virt_found=""
  local mac_vmware="/Applications/VMware Fusion.app/Contents/Library/vmnet-cli"

  if command -v VBoxManage >/dev/null ; then virt_found=1 ; fi
  if [ "$(uname -s)" = "Darwin" -a -f "$mac_vmware" ] ; then virt_found=1 ; fi

  if [ -n "$virt_found" ] ; then
    banner "VirtualBox or VMware install detected"
  else
    fail "Neither VirtualBox nor VMware install was detected, please install."
  fi
  if command -v vagrant >/dev/null ; then
    banner "Vagrant install detected"
  else
    fail "'vagrant' was not found in PATH, please install Vagrant."
  fi
  if command -v docker >/dev/null ; then
    banner "Docker install detected"
  else
    fail "'docker' was not found in PATH, please install Docker."
  fi
  banner 'Ready to go!'
}

docker_ip() {
  load_conf
  echo "${DOCKER_IP:-192.168.42.43}"
}

docker_cert_path() {
  load_conf
  echo "${DOCKER_CERT_PATH:-$HOME/.docker}"
}

docker_tls() {
  load_conf
  echo "${DOCKER_TLS:-yes}"
}

copy_certs() {
  if [ `dvm status | grep -c running` -gt 0 ]; then
    OPTIONS=$(dvm ssh-config | grep -v '^Host ' | awk -v ORS=' ' 'NF{print "-o " $1 "=" $2}')
    HOST=$(dvm ssh-config | grep HostName | awk '{print $NF}')
    if [ ! -d $(docker_cert_path) ]; then
          mkdir $(docker_cert_path)
    fi
    if (ssh ${OPTIONS} $HOST "[ -d /home/docker/.docker ]"); then
      scp -q ${OPTIONS} $HOST:/home/docker/.docker/*.pem $(docker_cert_path)/
    fi
    # If no .pem files exist, assume that TLS is off
    if [ $(ls $(docker_cert_path)/ | wc -l) -eq 0 ]; then
        DOCKER_TLS=no
    fi
  fi
}

setup_env() {
  load_conf
  if [[ $(docker_tls) == 'yes' ]]; then
      copy_certs
      DOCKER_PORT=2376
  fi
  if [[ $SHELL =~ .*fish$ ]] ; then
    echo "set -x DOCKER_HOST tcp://$(docker_ip):${DOCKER_PORT:-2375}"
    if [[ $(docker_tls) == 'yes' ]]; then
       echo "set -x DOCKER_TLS_VERIFY=$(docker_tls)"
       echo "set -x DOCKER_CERT_PATH=$(docker_cert_path)"
    else
      echo "set -e DOCKER_TLS_VERIFY"
    fi
  else
    echo "export DOCKER_HOST=tcp://$(docker_ip):${DOCKER_PORT:-2375}"
    # if DOCKER_TLS_VERIFY exists docker assumes TLS, so unset to be certain
    if [[ $(docker_tls) == 'yes' ]]; then
       echo "export DOCKER_TLS_VERIFY=$(docker_tls)"
       echo "export DOCKER_CERT_PATH=$(docker_cert_path)"
    else
      echo "unset DOCKER_TLS_VERIFY"
    fi
  fi
}

project_path=$(project_path)

case "$1" in
  --version|-v)         echo "$(basename $0): $DVM_VERSION";;
  --help|-h|help)       usage;;
  check|c*)             check;;
  destroy|d*)           shift; exec_vagrant destroy "$@";;
  env|e*)               setup_env;;
  halt|h*|stop|sto*)    shift; exec_vagrant halt "$@";;
  ip|i*)                docker_ip;;
  reload|rel*)          shift; exec_vagrant reload --provision "$@";;
  resume|res*)          shift; exec_vagrant resume "$@";;
  ssh)                  shift; exec_vagrant ssh "$@";;
  ssh-config)           shift; exec_vagrant ssh-config "$@";;
  status|stat*)         shift; exec_vagrant status "$@";;
  suspend|su*|pause|p)  shift; exec_vagrant suspend "$@";;
  up|u*|start|star*)    shift; exec_vagrant up --provision "$@";;
  vagrant|v*)           shift; exec_vagrant "$@";;
  *)                    usage; exit 1;;
esac
